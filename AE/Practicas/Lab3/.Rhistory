setwd("/home/edgar/Documentos/master/AE/Practicas/Lab3")
advertising <- read.csv2("Advertising.csv")
summary(advertising)
advertising <- read.csv("Advertising.csv")
summary(advertising)
plot(advertising)
z <- lm(Sales ~ TV + Radio + Newspaper, data="advertising")
z <- lm(Sales ~ TV + Radio + Newspaper, data="advertising")
z <- lm(Sales ~ TV + Radio + Newspaper, data="advertising")
z <- lm(Sales ~ TV + Radio + Newspaper, data=advertising)
z
class(z)
summary(z)
names(z)
coefs(z)
coef(z)
z
names(z)
advertising
?cbind
cbind(1, advertising)
advertising
cbind(1, advertising[,2:])
advertising[,2:]
advertising[,-1]
cbind(1, advertising[,-1])
advertising[,-1:-5]
advertising[,-c(1, 5)]
X <- cbind(1, advertising[,-c(1, 5)])
X
advertising[,5]
advertising
beta <- solve(t(X)*X)*t(X)*y
X
dim(X)
dim(y)
y <- advertising[,5]
dim(y)
y
advertising[,5]
advertising[,]
advertising[,1]
advertising[,2]
advertising[,3]
advertising[,4]
advertising[,4]
advertising[,5]
advertising[,6]
advertising[,5]
length(y)
dim(y)
dim(X)
beta <- solve(t(X)*X)*t(X)*y
dim(t(X)*X)
t(X)*X
X <- cbind(1, advertising[-c(1),-c(1, 5)])
advertising
advertising[-1]
advertising[-0]
advertising[-2]
advertising[-1]
advertising[-2]
X <- cbind(1, advertising[,-c(1, 5)])
X
dim(X)
t(X)
dim(t(X))
t(X)*X
dim(t(X)*X)
t(X)
dim(t(X))
dim(X)
dim(t(X)%*%X)
t(X)%*%X
X <- data.matrix(cbind(1, advertising[,-c(1, 5)]))
X
X <- cbind(1, advertising[,-c(1, 5)])
dimnames(X) <- NULL
dimnames(X)
colnames(X)
colnames(X) <- NULL
X
t(X)%*%X
t(X)
rm()
ls
ls()
rm(X)
ls()
X <- cbind(1, advertising[,-c(1, 5)])
rm(y)
y <- advertising[,5]
X
dim(X)
y
length(y)
t(X)
t(X)%*%X
X <- as.matrix(cbind(1, advertising[,-c(1, 5)]))
X
t(X)%*%X
beta <- solve(t(X)*X)*t(X)*y
beta <- solve(t(X)%*%X)%*%t(X)%*%y
beta
coef(z)
fitted(z)
advertising$Sales - fitted(z)
residuals(z)
residuals(z)^2
sum(residuals(z)^2)
nrow(z)
nrow(advertising)
ncol(advertising)
names(z)
z.terms
z$terms
RSE <- sqrt(RSS/(200 - 3 - 1))
RSS <- sum(residuals(z)^2)
RSE <- sqrt(RSS/(200 - 3 - 1))
RSE
summary(z)
confint(z) #level=95
confint(z, level=90)
confint(z, level=0.9)
summary(z)
z2 <- lm(Sales ~ TV + Radio, data = Advertising)
z2 <- lm(Sales ~ TV + Radio, data = advertising)
summary(z2)
newdata = data.frame(TV = 100, Radio = 20)
predict(z2, newdata)
predict(z2, newdata, interval = "confidence")
predict(z2, newdata, interval = "predict")
x <- runif(n, min=0, max=5)
n <- 100
x <- runif(n, min=0, max=5)
x
beta0 <- 2
beta1 <- 5
epsilon <- rnorm(n, sd = 1)
y <- beta0 + beta1*x + epsilon
y
plot(y)
epsilon <- rnorm(n, sd = 2)
y <- beta0 + beta1*x + epsilon
plot(y)
epsilon <- rnorm(n, sd = 100)
y <- beta0 + beta1*x + epsilon
plot(y)
epsilon <- rnorm(n, sd = 100000)
y <- beta0 + beta1*x + epsilon
plot(y)
epsilon <- rnorm(n, sd = 1e-10)
y <- beta0 + beta1*x + epsilon
plot(y)
lm(y ~ x)
q()
J <- function(b0, b1){1/2*sum((y-b0-b1*x)^2)}
descent_method <- function(b0, b1, t, N, eta){
  # check null values and t > 0
  iterations <- 0;
  print("J")
  print(J(b0, b1))
  while(iterations < N & J(b0, b1) > eta){
    print("Iterations")
    print(iterations)
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    print("J")
    print(J(b0, b1))
    b0 <- aux_b0
    print("b0")
    print(b0)
    b1 <- aux_b1
    print("b1")
    print(b1)
    iterations <- iterations + 1;
  }
  return (c(b0, b1))
}
descent_method(2, 5, 0.01, 5, 1e-15)
descent_method(0, 0, 0.01, 5, 1e-15)
sum(y-beta0-beta1*x)
sum(y)
descent_method(0, 0, 0.001, 5, 1e-15)
descent_method(0, 0, 0.001, 10, 1e-15)
descent_method(0, 0, 0.001, 1000, 1e-10)
descent_method(0, 0, 0.001, 1000, 1e-10)
b0 == NULL
function(asdf){asdf==NULL}
asdf <- function(asdf){asdf==NULL}
asdf(1)
asdf()
null
NULL
J <- function(b0, b1){1/2*sum((y-b0-b1*x)^2)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    return NA
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  return (c(b0, b1))
}
descent_method(0, 0, -0.0001, 5, 1e-15)
J <- function(b0, b1){1/2*sum((y-b0-b1*x)^2)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    return NULL
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  return (c(b0, b1))
}
J <- function(b0, b1){1/2*sum((y-b0-b1*x)^2)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    invisible(list(beta0 = NA, beta1= NA, iteraciones = 0))
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  invisible(list(beta0 = b0, beta1= b1, iteraciones = iteraciones))
}
descent_method(0, 0, -0.0001, 5, 1e-15)
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    invisible(list(beta0 = NA, beta1= NA, iteraciones = 0))
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  invisible(list(beta0 = b0, beta1= b1, iteraciones = iterations))
}
descent_method(0, 0, -0.0001, 5, 1e-15)
result  <- descent_method(0, 0, -0.0001, 5, 1e-15)
result
result  <- descent_method(0, 0, -0.0001, 1000, 1e-15)
result
result  <- descent_method(0, 0, -0.0001, 10000, 1e-15)
result
result  <- descent_method(0, 0, -0.0001, 10000, 1e-15)
result
descent_method <- function(b0, b1, t, N, eta){
  # check null values and t > 0
  iterations <- 0;
  print("J")
  print(J(b0, b1))
  while(iterations < N & J(b0, b1) > eta){
    print("Iterations")
    print(iterations)
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    print("J")
    print(J(b0, b1))
    b0 <- aux_b0
    print("b0")
    print(b0)
    b1 <- aux_b1
    print("b1")
    print(b1)
    iterations <- iterations + 1;
  }
  return (c(b0, b1))
}
descent_method(0, 0, -0.0001, 10000, 1e-15)
descent_method(0, 0, 0.0001, 10000, 1e-10)
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    invisible(list(beta0 = NA, beta1= NA, iteraciones = 0))
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  invisible(list(beta0 = b0, beta1= b1, iteraciones = iterations))
}
result <- descent_method(0, 0, 0.0001, 10000, 1e-10)
result
result <- descent_method(0, 0, 0.0001, 10000, 1e-12)
result
result <- descent_method(0, 0, -1, 10000, 1e-12)
result
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t <= 0){
    invisible(list(beta0 = NA, beta1= NA, iteraciones = 0))
    return
  }
  iterations <- 0;
  while(iterations < N & J(b0, b1) > eta){
    aux_b0 <- b0 + t*sum(y-b0-b1*x)
    aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
    b0 <- aux_b0
    b1 <- aux_b1
    iterations <- iterations + 1;
  }
  invisible(list(beta0 = b0, beta1= b1, iteraciones = iterations))
}
result <- descent_method(0, 0, -1, 10000, 1e-12)
result
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t > 0){
    iterations <- 0;
    while(iterations < N & J(b0, b1) > eta){
      aux_b0 <- b0 + t*sum(y-b0-b1*x)
      aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
      b0 <- aux_b0
      b1 <- aux_b1
      iterations <- iterations + 1;
    }
    invisible(list(beta0 = b0, beta1= b1, iteraciones = iterations))
  }
}
result <- descent_method(0, 0, -1, 10000, 1e-12)
result
result <- descent_method(0, 0, 1, 10000, 1e-12)
result <- descent_method(0, 0, 0.0001, 10000, 1e-12)
result
result <- descent_method(0, 0, 0.01, 10000, 1e-12)
result <- descent_method(0, 0, 0.001, 10000, 1e-12)
result
result <- descent_method(0, 0, 0.0001, 10000, 1e-12)
result
summary(z3)
z3 <- lm(y ~ x)
summary(z3)
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t > 0){
    iterations <- 0;
    while(iterations < N & J(b0, b1) > eta){
      aux_b0 <- b0 + t*sum(y-b0-b1*x)
      aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
      b0 <- aux_b0
      b1 <- aux_b1
      iterations <- iterations + 1;
    }
    invisible(list(beta0 = b0, beta1= b1, error=J(b0, b1), iteraciones = iterations))
  }
}
result <- descent_method(0, 0, 0.0001, 10000, 1e-12)
result
result <- descent_method(0, 0, 0.001, 10000, 1e-12)
result
result <- descent_method(0, 0, 0.001, 500, 1e-12)
result
result <- descent_method(0, 0, 0.001, 1000, 1e-10)
result
q()
ls(
)
z3 <- lm(y ~ x)
RSS <- function(b0, b1){1/2*sum((y-b0-b1*x)^2)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t > 0){
    iterations <- 0;
    while(iterations < N & RSS(b0, b1) > eta){
      aux_b0 <- b0 + t*sum(y-b0-b1*x)
      aux_b1 <- b1 + t*sum(x*(y-b0-b1*x))
      b0 <- aux_b0
      b1 <- aux_b1
      iterations <- iterations + 1;
    }
    invisible(list(beta0 = b0, beta1= b1, RSS=RSS(b0, b1), iteraciones = iterations))
  }
}
descent_method(0, 0, 0.0001, 10000, 1e-10)
result <- descent_method(0, 0, 0.0001, 10000, 1e-10)
result
result <- descent_method(0, 0, 0.0001, 10000, epsilon)
epsilon
result <- descent_method(0, 0, 0.0001, 10000, 1e-10)
result
summary(z3)
sqrt(result$RSS/(100-3))
sqrt(result$RSS/(n-3))
result <- descent_method(0, 0, 0.0001, 10000, 1e-15)
sqrt(result$RSS/(n-3))
result
result <- descent_method(0, 0, 0.0001, 10000, 0)
result
sqrt(result$RSS/(n-3))
result <- descent_method(0, 0, 0.0001, 1000000, 0)
sqrt(result$RSS/(n-3))
result
q()
# Valor n para la muestra
n <- 100
# x: n puntos aleatorios en el itervalo [min,max]
x <- runif(n, min=0, max=5)
# Parametro beta0 del modelo
beta0 <- 2
# Parametro beta1 del modelo
beta1 <- 5
# Error con desviacion tipica 1
epsilon <- rnorm(n, sd = 1)
# y
y <- beta0 + beta1*x + epsilon
# Calcular el valor de los parametros estimados con lm
z3 <- lm(y ~ x)
RSS <- function(b0, b1){sum((y-b0-b1*x)^2)}
RSE <- function(b0, b1){sqrt(RSS(b0, b1)/(n-2))}
J <- function(b0, b1){(1/2)*RSS(b0, b1)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t > 0){
    iterations <- 0;
    d_b0 <- function(b0, b1){-sum(y-b0-b1*x)}
    d_b1 <- function(b0, b1){-sum(x*(y-b0-b1*x))}
    norma2 <- function(b0, b1){sqrt(abs(d_b0(b0, b1))^2+abs(d_b1(b0, b1))^2)}
    while(iterations < N & norma2(b0, b1) > eta){
      aux_b0 <- b0 - t*d_b0(b0, b1)
      aux_b1 <- b1 - t*d_b1(b0, b1)
      b0 <- aux_b0
      b1 <- aux_b1
      iterations <- iterations + 1
    }
    invisible(list(beta0 = b0, beta1 = b1, RSS = RSS(b0, b1), RSE = RSE(b0, b1), iteraciones = iterations, norma2fn = norma2(b0, b1)))
  }
}
result <- descent_method(0, 0, 0.001, 10000, 1e-5)
result
summary(z3)
# Valor n para la muestra
n <- 100
# x: n puntos aleatorios en el intervalo [min,max]
x <- runif(n, min=0, max=5)
# Parametro beta0 del modelo
beta0 <- 2
# Parametro beta1 del modelo
beta1 <- 5
# Error con desviacion tipica 1
epsilon <- rnorm(n, sd = 1)
# y
y <- beta0 + beta1*x + epsilon
# Calcular el valor de los parametros estimados con lm
z3 <- lm(y ~ x)
RSS <- function(b0, b1){sum((y-b0-b1*x)^2)}
RSE <- function(b0, b1){sqrt(RSS(b0, b1)/(n-2))}
J <- function(b0, b1){(1/2)*RSS(b0, b1)}
descent_method <- function(b0, b1, t=0.001, N=1000, eta=1e-10){
  # Comprobar que t > 0
  if(t > 0){
    iterations <- 0;
    d_b0 <- function(b0, b1){-sum(y-b0-b1*x)}
    d_b1 <- function(b0, b1){-sum(x*(y-b0-b1*x))}
    norma2 <- function(b0, b1){sqrt(abs(d_b0(b0, b1))^2+abs(d_b1(b0, b1))^2)}
    while(iterations < N & norma2(b0, b1) > eta){
      aux_b0 <- b0 - t*d_b0(b0, b1)
      aux_b1 <- b1 - t*d_b1(b0, b1)
      b0 <- aux_b0
      b1 <- aux_b1
      iterations <- iterations + 1
    }
    invisible(list(beta0 = b0, beta1 = b1, RSS = RSS(b0, b1), RSE = RSE(b0, b1), iteraciones = iterations, norma2fn = norma2(b0, b1)))
  }
}
result <- descent_method(0, 0, 0.001, 10000, 1e-5)
result
summary(z3)
quit()
